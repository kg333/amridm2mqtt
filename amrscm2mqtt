#!/usr/bin/env python3
'''
Runs rtlamr to watch for SDM broadcasts from power meter. If meter id
is in the list, usage is sent to 'meters/{meter id}/reading'
topic on the MQTT broker specified in settings.

WATCHED_METERS = A Python list indicating those meter IDs to record and post.
MQTT_HOST = String containing the MQTT server address.
MQTT_PORT = An int containing the port the MQTT server is active on.

'''
import os
import subprocess
import signal
import sys
import time
import paho.mqtt.publish as publish
import settings

# uses signal to shutdown and hard kill opened processes and self
def shutdown(signum, frame):
    send_mqtt('meters/availability', 'offline')
    rtltcp.send_signal(15)
    rtlamr.send_signal(15)
    time.sleep(1)
    rtltcp.send_signal(9)
    rtlamr.send_signal(9)
    sys.exit(0)

signal.signal(signal.SIGTERM, shutdown)
signal.signal(signal.SIGINT, shutdown)

auth = None
if len(settings.MQTT_USER) and len(settings.MQTT_PASSWORD):
	auth = {'username':settings.MQTT_USER, 'password':settings.MQTT_PASSWORD}

DEBUG=os.environ.get('DEBUG', '').lower() in ['1', 'true', 't']

def debug_print(*args, **kwargs):
    if DEBUG:
        print(*args, **kwargs)

# send data to MQTT broker defined in settings
def send_mqtt(topic, payload):
    try:
        publish.single(topic, payload=payload, qos=0, retain=True, hostname=settings.MQTT_HOST, port=settings.MQTT_PORT, auth=auth, client_id="rtlamr")
    except Exception as ex:
        print("MQTT Publish Failed: " + str(ex))

# start the rtl_tcp program
rtltcp = subprocess.Popen([settings.RTL_TCP + " > /dev/null 2>&1 &"], shell=True,
    stdin=None, stdout=None, stderr=None, close_fds=True)
time.sleep(10)
debug_print('started rtl_tcp')

# start the rtlamr program.
filter_ids = ','.join(map(str, settings.WATCHED_METERS))
rtlamr_cmd = [settings.RTLAMR, '-msgtype=scm,scm+,r900', '-format=csv', '-filterid=' + filter_ids, '-symbollength=' + str(settings.SYMBOL_LENGTH)]
rtlamr = subprocess.Popen(rtlamr_cmd, stdout=subprocess.PIPE, universal_newlines=True)
debug_print('started rtlamr')

# Let listeners know we are available
send_mqtt('meters/availability', 'online')

while True:
    try:
        amrline = rtlamr.stdout.readline().strip()
        flds = amrline.split(',')

        if len(flds) == 9:
            # proper SCM results have 9 fields
            # make sure the meter id is one we want
            meter_id = int(flds[3])

            # get some required info: current meter reading
            reading = int(flds[7])

            debug_print('Sending SCM meter {} reading: {}'.format(meter_id, reading))
            send_mqtt('meters/{}/reading'.format(meter_id), reading)
        elif len(flds) == 10:
            # proper SCM+ results have 10 fields
            # make sure the meter id is one we want
            meter_id = int(flds[6])

            # get some required info: current meter reading
            reading = int(flds[7])

            debug_print('Sending SCM+ meter {} reading: {}'.format(meter_id, reading))
            send_mqtt('meters/{}/reading'.format(meter_id), reading)
        elif len(flds) == 11:
            # proper SCM+ results have 10 fields
            # make sure the meter id is one we want
            meter_id = int(flds[3])

            # get some required info: current meter reading
            reading = int(flds[7])

            debug_print('Sending R900 meter {} reading: {}'.format(meter_id, reading))
            send_mqtt('meters/{}/reading'.format(meter_id), reading)

    except Exception as e:
        debug_print('Exception squashed! {}: {}', e.__class__.__name__, e)
        time.sleep(2)
